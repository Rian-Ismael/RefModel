diff
"diff --git a/src/main/java/io/lettuce/core/dynamic/output/CommandOutputResolverSupport.java b/src/main/java/io/lettuce/core/dynamic/output/CommandOutputResolverSupport.java
index 448d987d0..367f1ab79 100644
--- a/src/main/java/io/lettuce/core/dynamic/output/CommandOutputResolverSupport.java
+++ b/src/main/java/io/lettuce/core/dynamic/output/CommandOutputResolverSupport.java
@@ -1,7 +1,5 @@
 package io.lettuce.core.dynamic.output;

-import io.lettuce.core.dynamic.support.ResolvableType;
-
 /**
  * Base class for {@link CommandOutputFactory} resolution such as {@link OutputRegistryCommandOutputFactoryResolver}.
  * <p>
@@ -12,21 +10,4 @@ import io.lettuce.core.dynamic.support.ResolvableType;
  */
 public abstract class CommandOutputResolverSupport {

-    /**
-     * Overridable hook to check whether {@code selector} can be assigned from the provider type {@code provider}
.
-     * <p>
-     * This method descends the component type hierarchy and considers primitive/wrapper type conversion.        
-     *
-     * @param selector must not be {@code null}.
-     * @param provider must not be {@code null}.
-     * @return {@code true} if selector can be assigned from its provider type.
-     */
-    protected boolean isAssignableFrom(OutputSelector selector, OutputType provider) {
-
-        ResolvableType selectorType = selector.getOutputType();
-        ResolvableType resolvableType = provider.withCodec(selector.getRedisCodec());
-
-        return selectorType.isAssignableFrom(resolvableType);
-    }
-
 }
diff --git a/src/main/java/io/lettuce/core/dynamic/output/OutputRegistryCommandOutputFactoryResolver.java b/src/main/java/io/lettuce/core/dynamic/output/OutputRegistryCommandOutputFactoryResolver.java
index 8ba3c724a..6019929a3 100644
--- a/src/main/java/io/lettuce/core/dynamic/output/OutputRegistryCommandOutputFactoryResolver.java
+++ b/src/main/java/io/lettuce/core/dynamic/output/OutputRegistryCommandOutputFactoryResolver.java
@@ -6,6 +6,7 @@ import java.util.Map;
 import java.util.stream.Collectors;

 import io.lettuce.core.dynamic.support.ClassTypeInformation;
+import io.lettuce.core.dynamic.support.ResolvableType;
 import io.lettuce.core.internal.LettuceAssert;
 import io.lettuce.core.output.CommandOutput;

@@ -87,4 +88,20 @@ public class OutputRegistryCommandOutputFactoryResolver extends CommandOutputRes
         }).collect(Collectors.toList());
     }

+    /**
+     * Overridable hook to check whether {@code selector} can be assigned from the provider type {@code provider}.
+     * <p>
+     * This method descends the component type hierarchy and considers primitive/wrapper type conversion.        
+     *
+     * @param selector must not be {@code null}.
+     * @param provider must not be {@code null}.
+     * @return {@code true} if selector can be assigned from its provider type.
+     */
+    protected boolean isAssignableFrom(OutputSelector selector, OutputType provider) {
+
+        ResolvableType selectorType = selector.getOutputType();
+        ResolvableType resolvableType = provider.withCodec(selector.getRedisCodec());
+
+        return selectorType.isAssignableFrom(resolvableType);
+    }
 }"